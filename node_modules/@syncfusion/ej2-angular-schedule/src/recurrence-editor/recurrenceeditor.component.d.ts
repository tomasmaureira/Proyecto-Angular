import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { RecurrenceEditor } from '@syncfusion/ej2-schedule';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * `ejs-recurrenceeditor` represents the Angular RecurrenceEditor Component.
 * ```html
 * <ejs-recurrenceeditor></ejs-recurrenceeditor>
 * ```
 */
export declare class RecurrenceEditorComponent extends RecurrenceEditor implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecurrenceEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RecurrenceEditorComponent, "ejs-recurrenceeditor", never, { "calendarMode": "calendarMode"; "cssClass": "cssClass"; "dateFormat": "dateFormat"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "firstDayOfWeek": "firstDayOfWeek"; "frequencies": "frequencies"; "locale": "locale"; "maxDate": "maxDate"; "minDate": "minDate"; "selectedType": "selectedType"; "startDate": "startDate"; "value": "value"; }, { "change": "change"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdXJyZW5jZWVkaXRvci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicmVjdXJyZW5jZWVkaXRvci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgUmVjdXJyZW5jZUVkaXRvciB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1zY2hlZHVsZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogYGVqcy1yZWN1cnJlbmNlZWRpdG9yYCByZXByZXNlbnRzIHRoZSBBbmd1bGFyIFJlY3VycmVuY2VFZGl0b3IgQ29tcG9uZW50LlxuICogYGBgaHRtbFxuICogPGVqcy1yZWN1cnJlbmNlZWRpdG9yPjwvZWpzLXJlY3VycmVuY2VlZGl0b3I+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmVjdXJyZW5jZUVkaXRvckNvbXBvbmVudCBleHRlbmRzIFJlY3VycmVuY2VFZGl0b3IgaW1wbGVtZW50cyBJQ29tcG9uZW50QmFzZSB7XG4gICAgcHJpdmF0ZSBuZ0VsZTtcbiAgICBwcml2YXRlIHNyZW5kZXJlcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBjb250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIGNvbnN0cnVjdG9yKG5nRWxlOiBFbGVtZW50UmVmLCBzcmVuZGVyZXI6IFJlbmRlcmVyMiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==