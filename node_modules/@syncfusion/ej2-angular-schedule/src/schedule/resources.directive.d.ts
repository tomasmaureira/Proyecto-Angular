import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * `e-resources` directive represent a resources of the Angular Schedule.
 * It must be contained in a Schedule component(`ejs-schedule`).
 * ```html
 * <ejs-schedule>
 *   <e-resources>
 *    <e-resource field='RoomId' name='Rooms'></e-resource>
 *    <e-resource field='OwnerId' name='Owners'></e-resource>
 *   </e-resources>
 * </ejs-schedule>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ResourceDirective extends ComplexBase<ResourceDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * When set to true, allows multiple selection of resource names, thus creating multiple instances of same appointment for the
     *  selected resources.
     * @default false
     */
    allowMultiple: any;
    /**
     * It maps the `color` field from the dataSource, which is used to specify colors for the resources.
     * @default 'Color'
     */
    colorField: any;
    /**
     * It maps the `cssClass` field from the dataSource, which is used to specify different styles to each resource appointments.
     * @default 'CssClass'
     */
    cssClassField: any;
    /**
     * Assigns the resource dataSource
     * The data can be passed either as an array of JavaScript objects,
     * or else can create an instance of [`DataManager`](http://ej2.syncfusion.com/documentation/data/api-dataManager.html)
     * in case of processing remote data and can be assigned to the `dataSource` property.
     * With the remote data assigned to dataSource, check the available
     *  [adaptors](http://ej2.syncfusion.com/documentation/data/adaptors.html) to customize the data processing.
     * @default []
     * @isgenerictype true
     */
    dataSource: any;
    /**
     * It maps the `endHour` field from the dataSource, which is used to specify different work end hour for each resources.
     * @default 'EndHour'
     */
    endHourField: any;
    /**
     * It maps the `expanded` field from the dataSource, which is used to specify whether each resource levels
     * in timeline view needs to be maintained in an expanded or collapsed state by default.
     * @default 'Expanded'
     */
    expandedField: any;
    /**
     * A value that binds to the resource field of event object.
     * @default null
     */
    field: any;
    /**
     * It maps the `groupID` field from the dataSource, which is used to specify under which parent resource,
     *  the child should be grouped.
     * @default 'GroupID'
     */
    groupIDField: any;
    /**
     * It maps the `id` field from the dataSource and is used to uniquely identify the resources.
     * @default 'Id'
     */
    idField: any;
    /**
     * It represents a unique resource name for differentiating various resource objects while grouping.
     * @default null
     */
    name: any;
    /**
     * Defines the external [`query`](http://ej2.syncfusion.com/documentation/data/api-query.html)
     * that will be executed along with the data processing.
     * @default null
     * @blazortype Syncfusion.Blazor.Data.Query
     */
    query: any;
    /**
     * It maps the `startHour` field from the dataSource, which is used to specify different work start hour for each resources.
     * @default 'StartHour'
     */
    startHourField: any;
    /**
     * It maps the `text` field from the dataSource, which is used to specify the resource names.
     * @default 'Text'
     */
    textField: any;
    /**
     * It holds the title of the resource field to be displayed on the schedule event editor window.
     * @default null
     */
    title: any;
    /**
     * It maps the working days field from the dataSource, which is used to specify different working days for each resources.
     * @default 'WorkDays'
     */
    workDaysField: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResourceDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ResourceDirective, "e-resources>e-resource", never, { "allowMultiple": "allowMultiple"; "colorField": "colorField"; "cssClassField": "cssClassField"; "dataSource": "dataSource"; "endHourField": "endHourField"; "expandedField": "expandedField"; "field": "field"; "groupIDField": "groupIDField"; "idField": "idField"; "name": "name"; "query": "query"; "startHourField": "startHourField"; "textField": "textField"; "title": "title"; "workDaysField": "workDaysField"; }, {}, never>;
}
/**
 * Resource Array Directive
 * @private
 */
export declare class ResourcesDirective extends ArrayBase<ResourcesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResourcesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ResourcesDirective, "ejs-schedule>e-resources", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJyZXNvdXJjZXMuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBsZXhCYXNlLCBBcnJheUJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbi8qKlxuICogYGUtcmVzb3VyY2VzYCBkaXJlY3RpdmUgcmVwcmVzZW50IGEgcmVzb3VyY2VzIG9mIHRoZSBBbmd1bGFyIFNjaGVkdWxlLlxuICogSXQgbXVzdCBiZSBjb250YWluZWQgaW4gYSBTY2hlZHVsZSBjb21wb25lbnQoYGVqcy1zY2hlZHVsZWApLlxuICogYGBgaHRtbFxuICogPGVqcy1zY2hlZHVsZT5cbiAqICAgPGUtcmVzb3VyY2VzPlxuICogICAgPGUtcmVzb3VyY2UgZmllbGQ9J1Jvb21JZCcgbmFtZT0nUm9vbXMnPjwvZS1yZXNvdXJjZT5cbiAqICAgIDxlLXJlc291cmNlIGZpZWxkPSdPd25lcklkJyBuYW1lPSdPd25lcnMnPjwvZS1yZXNvdXJjZT5cbiAqICAgPC9lLXJlc291cmNlcz5cbiAqIDwvZWpzLXNjaGVkdWxlPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJlc291cmNlRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8UmVzb3VyY2VEaXJlY3RpdmU+IHtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byB0cnVlLCBhbGxvd3MgbXVsdGlwbGUgc2VsZWN0aW9uIG9mIHJlc291cmNlIG5hbWVzLCB0aHVzIGNyZWF0aW5nIG11bHRpcGxlIGluc3RhbmNlcyBvZiBzYW1lIGFwcG9pbnRtZW50IGZvciB0aGVcbiAgICAgKiAgc2VsZWN0ZWQgcmVzb3VyY2VzLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgYWxsb3dNdWx0aXBsZTogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IG1hcHMgdGhlIGBjb2xvcmAgZmllbGQgZnJvbSB0aGUgZGF0YVNvdXJjZSwgd2hpY2ggaXMgdXNlZCB0byBzcGVjaWZ5IGNvbG9ycyBmb3IgdGhlIHJlc291cmNlcy5cbiAgICAgKiBAZGVmYXVsdCAnQ29sb3InXG4gICAgICovXG4gICAgY29sb3JGaWVsZDogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IG1hcHMgdGhlIGBjc3NDbGFzc2AgZmllbGQgZnJvbSB0aGUgZGF0YVNvdXJjZSwgd2hpY2ggaXMgdXNlZCB0byBzcGVjaWZ5IGRpZmZlcmVudCBzdHlsZXMgdG8gZWFjaCByZXNvdXJjZSBhcHBvaW50bWVudHMuXG4gICAgICogQGRlZmF1bHQgJ0Nzc0NsYXNzJ1xuICAgICAqL1xuICAgIGNzc0NsYXNzRmllbGQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIHRoZSByZXNvdXJjZSBkYXRhU291cmNlXG4gICAgICogVGhlIGRhdGEgY2FuIGJlIHBhc3NlZCBlaXRoZXIgYXMgYW4gYXJyYXkgb2YgSmF2YVNjcmlwdCBvYmplY3RzLFxuICAgICAqIG9yIGVsc2UgY2FuIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBbYERhdGFNYW5hZ2VyYF0oaHR0cDovL2VqMi5zeW5jZnVzaW9uLmNvbS9kb2N1bWVudGF0aW9uL2RhdGEvYXBpLWRhdGFNYW5hZ2VyLmh0bWwpXG4gICAgICogaW4gY2FzZSBvZiBwcm9jZXNzaW5nIHJlbW90ZSBkYXRhIGFuZCBjYW4gYmUgYXNzaWduZWQgdG8gdGhlIGBkYXRhU291cmNlYCBwcm9wZXJ0eS5cbiAgICAgKiBXaXRoIHRoZSByZW1vdGUgZGF0YSBhc3NpZ25lZCB0byBkYXRhU291cmNlLCBjaGVjayB0aGUgYXZhaWxhYmxlXG4gICAgICogIFthZGFwdG9yc10oaHR0cDovL2VqMi5zeW5jZnVzaW9uLmNvbS9kb2N1bWVudGF0aW9uL2RhdGEvYWRhcHRvcnMuaHRtbCkgdG8gY3VzdG9taXplIHRoZSBkYXRhIHByb2Nlc3NpbmcuXG4gICAgICogQGRlZmF1bHQgW11cbiAgICAgKiBAaXNnZW5lcmljdHlwZSB0cnVlXG4gICAgICovXG4gICAgZGF0YVNvdXJjZTogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IG1hcHMgdGhlIGBlbmRIb3VyYCBmaWVsZCBmcm9tIHRoZSBkYXRhU291cmNlLCB3aGljaCBpcyB1c2VkIHRvIHNwZWNpZnkgZGlmZmVyZW50IHdvcmsgZW5kIGhvdXIgZm9yIGVhY2ggcmVzb3VyY2VzLlxuICAgICAqIEBkZWZhdWx0ICdFbmRIb3VyJ1xuICAgICAqL1xuICAgIGVuZEhvdXJGaWVsZDogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IG1hcHMgdGhlIGBleHBhbmRlZGAgZmllbGQgZnJvbSB0aGUgZGF0YVNvdXJjZSwgd2hpY2ggaXMgdXNlZCB0byBzcGVjaWZ5IHdoZXRoZXIgZWFjaCByZXNvdXJjZSBsZXZlbHNcbiAgICAgKiBpbiB0aW1lbGluZSB2aWV3IG5lZWRzIHRvIGJlIG1haW50YWluZWQgaW4gYW4gZXhwYW5kZWQgb3IgY29sbGFwc2VkIHN0YXRlIGJ5IGRlZmF1bHQuXG4gICAgICogQGRlZmF1bHQgJ0V4cGFuZGVkJ1xuICAgICAqL1xuICAgIGV4cGFuZGVkRmllbGQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBBIHZhbHVlIHRoYXQgYmluZHMgdG8gdGhlIHJlc291cmNlIGZpZWxkIG9mIGV2ZW50IG9iamVjdC5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZmllbGQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBJdCBtYXBzIHRoZSBgZ3JvdXBJRGAgZmllbGQgZnJvbSB0aGUgZGF0YVNvdXJjZSwgd2hpY2ggaXMgdXNlZCB0byBzcGVjaWZ5IHVuZGVyIHdoaWNoIHBhcmVudCByZXNvdXJjZSxcbiAgICAgKiAgdGhlIGNoaWxkIHNob3VsZCBiZSBncm91cGVkLlxuICAgICAqIEBkZWZhdWx0ICdHcm91cElEJ1xuICAgICAqL1xuICAgIGdyb3VwSURGaWVsZDogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IG1hcHMgdGhlIGBpZGAgZmllbGQgZnJvbSB0aGUgZGF0YVNvdXJjZSBhbmQgaXMgdXNlZCB0byB1bmlxdWVseSBpZGVudGlmeSB0aGUgcmVzb3VyY2VzLlxuICAgICAqIEBkZWZhdWx0ICdJZCdcbiAgICAgKi9cbiAgICBpZEZpZWxkOiBhbnk7XG4gICAgLyoqXG4gICAgICogSXQgcmVwcmVzZW50cyBhIHVuaXF1ZSByZXNvdXJjZSBuYW1lIGZvciBkaWZmZXJlbnRpYXRpbmcgdmFyaW91cyByZXNvdXJjZSBvYmplY3RzIHdoaWxlIGdyb3VwaW5nLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBuYW1lOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZXh0ZXJuYWwgW2BxdWVyeWBdKGh0dHA6Ly9lajIuc3luY2Z1c2lvbi5jb20vZG9jdW1lbnRhdGlvbi9kYXRhL2FwaS1xdWVyeS5odG1sKVxuICAgICAqIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhbG9uZyB3aXRoIHRoZSBkYXRhIHByb2Nlc3NpbmcuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBibGF6b3J0eXBlIFN5bmNmdXNpb24uQmxhem9yLkRhdGEuUXVlcnlcbiAgICAgKi9cbiAgICBxdWVyeTogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IG1hcHMgdGhlIGBzdGFydEhvdXJgIGZpZWxkIGZyb20gdGhlIGRhdGFTb3VyY2UsIHdoaWNoIGlzIHVzZWQgdG8gc3BlY2lmeSBkaWZmZXJlbnQgd29yayBzdGFydCBob3VyIGZvciBlYWNoIHJlc291cmNlcy5cbiAgICAgKiBAZGVmYXVsdCAnU3RhcnRIb3VyJ1xuICAgICAqL1xuICAgIHN0YXJ0SG91ckZpZWxkOiBhbnk7XG4gICAgLyoqXG4gICAgICogSXQgbWFwcyB0aGUgYHRleHRgIGZpZWxkIGZyb20gdGhlIGRhdGFTb3VyY2UsIHdoaWNoIGlzIHVzZWQgdG8gc3BlY2lmeSB0aGUgcmVzb3VyY2UgbmFtZXMuXG4gICAgICogQGRlZmF1bHQgJ1RleHQnXG4gICAgICovXG4gICAgdGV4dEZpZWxkOiBhbnk7XG4gICAgLyoqXG4gICAgICogSXQgaG9sZHMgdGhlIHRpdGxlIG9mIHRoZSByZXNvdXJjZSBmaWVsZCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHNjaGVkdWxlIGV2ZW50IGVkaXRvciB3aW5kb3cuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHRpdGxlOiBhbnk7XG4gICAgLyoqXG4gICAgICogSXQgbWFwcyB0aGUgd29ya2luZyBkYXlzIGZpZWxkIGZyb20gdGhlIGRhdGFTb3VyY2UsIHdoaWNoIGlzIHVzZWQgdG8gc3BlY2lmeSBkaWZmZXJlbnQgd29ya2luZyBkYXlzIGZvciBlYWNoIHJlc291cmNlcy5cbiAgICAgKiBAZGVmYXVsdCAnV29ya0RheXMnXG4gICAgICovXG4gICAgd29ya0RheXNGaWVsZDogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBSZXNvdXJjZSBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJlc291cmNlc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxSZXNvdXJjZXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19