import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Schedule } from '@syncfusion/ej2-schedule';
import { ViewsDirective } from './views.directive';
import { ResourcesDirective } from './resources.directive';
import { HeaderRowsDirective } from './headerrows.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * `ej-schedule` represents the Angular Schedule Component.
 * ```html
 * <ejs-schedule></ejs-schedule>
 * ```
 */
export declare class ScheduleComponent extends Schedule implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childViews: QueryList<ViewsDirective>;
    childResources: QueryList<ResourcesDirective>;
    childHeaderRows: QueryList<HeaderRowsDirective>;
    tags: string[];
    currentViewChange: any;
    selectedDateChange: any;
    /**
     * It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto
     * the date header cells. The field that can be accessed via this template is `date`.
     * {% codeBlock src='schedule/dateHeaderTemplate/index.md' %}{% endcodeBlock %}
     * @default null
     */
    dateHeaderTemplate: any;
    /**
     * The template option which is used to render the customized work cells on the Schedule. Here, the template accepts either
     *  the string or HTMLElement as template design and then the parsed design is displayed onto the work cells.
     *  The fields accessible via template are as follows.
     *  * date
     *  * groupIndex
     *  * type
     * {% codeBlock src='schedule/cellTemplate/index.md' %}{% endcodeBlock %}
     * @default null
     */
    cellTemplate: any;
    /**
     * It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto
     * the month date cells. This template is only applicable for month view day cells.
     * {% codeBlock src='schedule/cellHeaderTemplate/index.md' %}{% endcodeBlock %}
     * @default null
     */
    cellHeaderTemplate: any;
    eventSettings_tooltipTemplate: any;
    eventSettings_template: any;
    /**
     * The template option to render the customized editor window. The form elements defined within this template should be accompanied
     *  with `e-field` class, so as to fetch and process it from internally.
     * {% codeBlock src='schedule/editorTemplate/index.md' %}{% endcodeBlock %}
     * @default null
     */
    editorTemplate: any;
    timeScale_minorSlotTemplate: any;
    timeScale_majorSlotTemplate: any;
    /**
     * Template option to customize the resource header bar. Here, the template accepts either
     *  the string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.
     * The following can be accessible via template.
     * * resource - All the resource fields.
     * * resourceData - object collection of current resource.
     * {% codeBlock src='schedule/resourceHeaderTemplate/index.md' %}{% endcodeBlock %}
     * @default null
     */
    resourceHeaderTemplate: any;
    quickInfoTemplates_header: any;
    quickInfoTemplates_content: any;
    quickInfoTemplates_footer: any;
    group_headerTooltipTemplate: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScheduleComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ScheduleComponent, "ejs-schedule", never, { "agendaDaysCount": "agendaDaysCount"; "allowDragAndDrop": "allowDragAndDrop"; "allowKeyboardInteraction": "allowKeyboardInteraction"; "allowMultiCellSelection": "allowMultiCellSelection"; "allowMultiRowSelection": "allowMultiRowSelection"; "allowResizing": "allowResizing"; "calendarMode": "calendarMode"; "cellHeaderTemplate": "cellHeaderTemplate"; "cellTemplate": "cellTemplate"; "cssClass": "cssClass"; "currentView": "currentView"; "dateFormat": "dateFormat"; "dateHeaderTemplate": "dateHeaderTemplate"; "editorTemplate": "editorTemplate"; "enablePersistence": "enablePersistence"; "enableRecurrenceValidation": "enableRecurrenceValidation"; "enableRtl": "enableRtl"; "endHour": "endHour"; "eventDragArea": "eventDragArea"; "eventSettings": "eventSettings"; "firstDayOfWeek": "firstDayOfWeek"; "group": "group"; "headerRows": "headerRows"; "height": "height"; "hideEmptyAgendaDays": "hideEmptyAgendaDays"; "locale": "locale"; "maxDate": "maxDate"; "minDate": "minDate"; "quickInfoOnSelectionEnd": "quickInfoOnSelectionEnd"; "quickInfoTemplates": "quickInfoTemplates"; "readonly": "readonly"; "resourceHeaderTemplate": "resourceHeaderTemplate"; "resources": "resources"; "rowAutoHeight": "rowAutoHeight"; "selectedDate": "selectedDate"; "showHeaderBar": "showHeaderBar"; "showQuickInfo": "showQuickInfo"; "showTimeIndicator": "showTimeIndicator"; "showWeekNumber": "showWeekNumber"; "showWeekend": "showWeekend"; "startHour": "startHour"; "timeScale": "timeScale"; "timezone": "timezone"; "views": "views"; "width": "width"; "workDays": "workDays"; "workHours": "workHours"; }, { "actionBegin": "actionBegin"; "actionComplete": "actionComplete"; "actionFailure": "actionFailure"; "cellClick": "cellClick"; "cellDoubleClick": "cellDoubleClick"; "created": "created"; "dataBinding": "dataBinding"; "dataBound": "dataBound"; "destroyed": "destroyed"; "drag": "drag"; "dragStart": "dragStart"; "dragStop": "dragStop"; "eventClick": "eventClick"; "eventRendered": "eventRendered"; "hover": "hover"; "moreEventsClick": "moreEventsClick"; "navigating": "navigating"; "popupClose": "popupClose"; "popupOpen": "popupOpen"; "renderCell": "renderCell"; "resizeStart": "resizeStart"; "resizeStop": "resizeStop"; "resizing": "resizing"; "select": "select"; "currentViewChange": "currentViewChange"; "selectedDateChange": "selectedDateChange"; }, ["dateHeaderTemplate", "cellTemplate", "cellHeaderTemplate", "eventSettings_tooltipTemplate", "eventSettings_template", "editorTemplate", "timeScale_minorSlotTemplate", "timeScale_majorSlotTemplate", "resourceHeaderTemplate", "quickInfoTemplates_header", "quickInfoTemplates_content", "quickInfoTemplates_footer", "group_headerTooltipTemplate", "childViews", "childResources", "childHeaderRows"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNjaGVkdWxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDb21wb25lbnRCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBTY2hlZHVsZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1zY2hlZHVsZSc7XG5pbXBvcnQgeyBWaWV3c0RpcmVjdGl2ZSB9IGZyb20gJy4vdmlld3MuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJlc291cmNlc0RpcmVjdGl2ZSB9IGZyb20gJy4vcmVzb3VyY2VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBIZWFkZXJSb3dzRGlyZWN0aXZlIH0gZnJvbSAnLi9oZWFkZXJyb3dzLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogYGVqLXNjaGVkdWxlYCByZXByZXNlbnRzIHRoZSBBbmd1bGFyIFNjaGVkdWxlIENvbXBvbmVudC5cbiAqIGBgYGh0bWxcbiAqIDxlanMtc2NoZWR1bGU+PC9lanMtc2NoZWR1bGU+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2NoZWR1bGVDb21wb25lbnQgZXh0ZW5kcyBTY2hlZHVsZSBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRWaWV3czogUXVlcnlMaXN0PFZpZXdzRGlyZWN0aXZlPjtcbiAgICBjaGlsZFJlc291cmNlczogUXVlcnlMaXN0PFJlc291cmNlc0RpcmVjdGl2ZT47XG4gICAgY2hpbGRIZWFkZXJSb3dzOiBRdWVyeUxpc3Q8SGVhZGVyUm93c0RpcmVjdGl2ZT47XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgY3VycmVudFZpZXdDaGFuZ2U6IGFueTtcbiAgICBzZWxlY3RlZERhdGVDaGFuZ2U6IGFueTtcbiAgICAvKipcbiAgICAgKiBJdCBhY2NlcHRzIGVpdGhlciB0aGUgc3RyaW5nIG9yIEhUTUxFbGVtZW50IGFzIHRlbXBsYXRlIGRlc2lnbiBjb250ZW50IGFuZCBwYXJzZSBpdCBhcHByb3ByaWF0ZWx5IGJlZm9yZSBkaXNwbGF5aW5nIGl0IG9udG9cbiAgICAgKiB0aGUgZGF0ZSBoZWFkZXIgY2VsbHMuIFRoZSBmaWVsZCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCB2aWEgdGhpcyB0ZW1wbGF0ZSBpcyBgZGF0ZWAuXG4gICAgICogeyUgY29kZUJsb2NrIHNyYz0nc2NoZWR1bGUvZGF0ZUhlYWRlclRlbXBsYXRlL2luZGV4Lm1kJyAlfXslIGVuZGNvZGVCbG9jayAlfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBkYXRlSGVhZGVyVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgb3B0aW9uIHdoaWNoIGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBjdXN0b21pemVkIHdvcmsgY2VsbHMgb24gdGhlIFNjaGVkdWxlLiBIZXJlLCB0aGUgdGVtcGxhdGUgYWNjZXB0cyBlaXRoZXJcbiAgICAgKiAgdGhlIHN0cmluZyBvciBIVE1MRWxlbWVudCBhcyB0ZW1wbGF0ZSBkZXNpZ24gYW5kIHRoZW4gdGhlIHBhcnNlZCBkZXNpZ24gaXMgZGlzcGxheWVkIG9udG8gdGhlIHdvcmsgY2VsbHMuXG4gICAgICogIFRoZSBmaWVsZHMgYWNjZXNzaWJsZSB2aWEgdGVtcGxhdGUgYXJlIGFzIGZvbGxvd3MuXG4gICAgICogICogZGF0ZVxuICAgICAqICAqIGdyb3VwSW5kZXhcbiAgICAgKiAgKiB0eXBlXG4gICAgICogeyUgY29kZUJsb2NrIHNyYz0nc2NoZWR1bGUvY2VsbFRlbXBsYXRlL2luZGV4Lm1kJyAlfXslIGVuZGNvZGVCbG9jayAlfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBjZWxsVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBJdCBhY2NlcHRzIGVpdGhlciB0aGUgc3RyaW5nIG9yIEhUTUxFbGVtZW50IGFzIHRlbXBsYXRlIGRlc2lnbiBjb250ZW50IGFuZCBwYXJzZSBpdCBhcHByb3ByaWF0ZWx5IGJlZm9yZSBkaXNwbGF5aW5nIGl0IG9udG9cbiAgICAgKiB0aGUgbW9udGggZGF0ZSBjZWxscy4gVGhpcyB0ZW1wbGF0ZSBpcyBvbmx5IGFwcGxpY2FibGUgZm9yIG1vbnRoIHZpZXcgZGF5IGNlbGxzLlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9J3NjaGVkdWxlL2NlbGxIZWFkZXJUZW1wbGF0ZS9pbmRleC5tZCcgJX17JSBlbmRjb2RlQmxvY2sgJX1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgY2VsbEhlYWRlclRlbXBsYXRlOiBhbnk7XG4gICAgZXZlbnRTZXR0aW5nc190b29sdGlwVGVtcGxhdGU6IGFueTtcbiAgICBldmVudFNldHRpbmdzX3RlbXBsYXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIHRlbXBsYXRlIG9wdGlvbiB0byByZW5kZXIgdGhlIGN1c3RvbWl6ZWQgZWRpdG9yIHdpbmRvdy4gVGhlIGZvcm0gZWxlbWVudHMgZGVmaW5lZCB3aXRoaW4gdGhpcyB0ZW1wbGF0ZSBzaG91bGQgYmUgYWNjb21wYW5pZWRcbiAgICAgKiAgd2l0aCBgZS1maWVsZGAgY2xhc3MsIHNvIGFzIHRvIGZldGNoIGFuZCBwcm9jZXNzIGl0IGZyb20gaW50ZXJuYWxseS5cbiAgICAgKiB7JSBjb2RlQmxvY2sgc3JjPSdzY2hlZHVsZS9lZGl0b3JUZW1wbGF0ZS9pbmRleC5tZCcgJX17JSBlbmRjb2RlQmxvY2sgJX1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZWRpdG9yVGVtcGxhdGU6IGFueTtcbiAgICB0aW1lU2NhbGVfbWlub3JTbG90VGVtcGxhdGU6IGFueTtcbiAgICB0aW1lU2NhbGVfbWFqb3JTbG90VGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBUZW1wbGF0ZSBvcHRpb24gdG8gY3VzdG9taXplIHRoZSByZXNvdXJjZSBoZWFkZXIgYmFyLiBIZXJlLCB0aGUgdGVtcGxhdGUgYWNjZXB0cyBlaXRoZXJcbiAgICAgKiAgdGhlIHN0cmluZyBvciBIVE1MRWxlbWVudCBhcyB0ZW1wbGF0ZSBkZXNpZ24gYW5kIHRoZW4gdGhlIHBhcnNlZCBkZXNpZ24gaXMgZGlzcGxheWVkIG9udG8gdGhlIHJlc291cmNlIGhlYWRlciBjZWxscy5cbiAgICAgKiBUaGUgZm9sbG93aW5nIGNhbiBiZSBhY2Nlc3NpYmxlIHZpYSB0ZW1wbGF0ZS5cbiAgICAgKiAqIHJlc291cmNlIC0gQWxsIHRoZSByZXNvdXJjZSBmaWVsZHMuXG4gICAgICogKiByZXNvdXJjZURhdGEgLSBvYmplY3QgY29sbGVjdGlvbiBvZiBjdXJyZW50IHJlc291cmNlLlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9J3NjaGVkdWxlL3Jlc291cmNlSGVhZGVyVGVtcGxhdGUvaW5kZXgubWQnICV9eyUgZW5kY29kZUJsb2NrICV9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHJlc291cmNlSGVhZGVyVGVtcGxhdGU6IGFueTtcbiAgICBxdWlja0luZm9UZW1wbGF0ZXNfaGVhZGVyOiBhbnk7XG4gICAgcXVpY2tJbmZvVGVtcGxhdGVzX2NvbnRlbnQ6IGFueTtcbiAgICBxdWlja0luZm9UZW1wbGF0ZXNfZm9vdGVyOiBhbnk7XG4gICAgZ3JvdXBfaGVhZGVyVG9vbHRpcFRlbXBsYXRlOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19